Part 1

  1)  this program would be harder to write using processes instead of threads
      because processes would not be able to access the shared memeory space
      that threads can. The threads can all access the variables workperformed,
      please_quit, and use_yield which would not be possible with processes.

  2)  workperformed is used as a flag to check whether work has been performed
      since the last time the string was checked during the wait_till_done func.

  3)  fp is a function pointer. It must be a pointer to a function that returns
      a void pointer and takes a void pointer as an argument.

  Questions:

  1)  if we detached any of the enzyme threads then we would not be able to
      join them and retrieve the data on how many swaps they made.

  2)  the program uses sched_yield to allow the other threads to complete their
      work while there is nothing to do with the current thread. if it wasn't
      used, then the threads would continue in a busy-waiting loop until they
      timed out on the processor. The swapcount will always be identical because
      we do not change the data on which the threads work on, but it will just
      take longer.

  3)  We do not include cancelled swaps in the swapcount for two reasons. first
      off, if it was cancelled then it will have exited before it had the chance
      to swap the values. Second, even if we wanted to, when we join the threads
      we will not get any of the information returned to us and we will not
      know if the swap would have happened or not (if we did the swap before the
      exit).

  4)  if a thread tries to join itself it will create an EDEADLK error. It would
      in theory create a deadlock as it will wait for the joining thread to
      terminate, but can't terminate until it terminates... however you get a
      EDEADLOK instead.

  5)  sleeper thread is implemented using the sleep function. it sets a limit
      on how long we have to sort the string before it exits the process. It is
      a thread that is created just to block for 5 seconds and then terminate
      the process.

  6)  we use PTHREAD_CANCEL_ASYNCHRONOUS so that we can cancel the thread at
      any point, and not have to wait for a cancel point. this is to ensure
      that when we call pthread_cancel() we terminate the thread right away.

  7)  The memory leak was due to the fact that we are passing a info into the
      thread as a parameter, but since it was allocated on the heap, and we keep
      passing in the same info object the threads keep overwriting themselves.
      We had to allocate a new info object every time we created a thread so it
      had to be done inside the for loop.

Part 2

  1)  The most critical synchronization error that we could occur right now
      would be trying to perform a strcpy onto the buffer while the buffer is
      being read. For example, if we were trying to left shift the buffer in the
      sentinel thread while we are trying to read a character that just got
      overwritten in the addition or multiplication thread. we could end up with
      any sort of undefined errors, the worst of which would give us wildy
      incorrect output.

  2)

  3)  the data structures we would need to worry about is the buffer. it is the
      only data that is shared between the threads.

  4)  if we had a busy-wait within one of our critical sections we would cause
      a deadlock, where the other threads would not be able to continue once
      the bus-wait was initiated. Even if the loop included sched_yield, we
      would still be left with a deadlock, as even though it allows the another
      threads to run, they would still be stuck waiting for the lock.

  5)  sometimes, having a non-blocking mutex lock allows the program to avoid
      deadlocks. it also allows the program to do other useful work while it
      is waiting to aquire a lock. for example, in a process that is
      communicating with another process, we may want the reciever of the
      message to be non-blocking so it can continue to do other work while
      periodically checking for a message.

  6)  yes, a mutex would be needed to ensure that we are free from race
      conditions. There could be the possability that two threads try and update
      the total at the same time, both grabbing the same starting value and only
      the loser of the race adding their value to the total.

  7)  because the critical sections are atomic, they will not respond to an
      interupt so even on single processor machines it is best to keep them as
      short as possible.

  8)  spin-waiting without yielding is often inefficient because the thread will
      spin-wait until its time is up in the processor. With a yield, it will
      immediately allow the other threads to go, as long as the waiting thread
      isn't of greater priority.

  9)  spin-waiting without yielding would only be more efficient if the expected
      wait for the lock was short enough that we would be better off just
      waiting than having to reschedule and pass control back to the kernel.

  10) to immitate a mutex, you should pass the value 1 to the semaphore. since
      the value passed to the semaphore is used as the number of threads that
      should be able to access it, if you were to supply a greater number you
      would have a chance of multiple threads accessing the same data.
